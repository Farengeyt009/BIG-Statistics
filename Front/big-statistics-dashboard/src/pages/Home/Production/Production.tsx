// src/pages/Home/Production/Production.tsx
import React, { useState, useEffect, useCallback } from 'react';
import { kpiData, pagesTable, refTable } from './utils/mockData';
import { MetricCard } from '../../../components/KPICards';
import { TrendChart } from './components/TrendChart';
import { MiniTable } from './components/MiniTable';
import { DateRangePickerPro } from '../../../components/DatePicker';
import { useTranslation } from 'react-i18next';
import homeTranslations from '../HomeTranslation.json';
import { ProductionProvider } from './ProductionContext';
import { AutoDashboard } from './components/AutoDashboard';

export default function Production() {
  const { i18n } = useTranslation();
  const currentLanguage = i18n.language as 'en' | 'zh';

  /** -------------------- —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏–π —Ü–µ—Ö–æ–≤ -------------------- */
  const translateWorkShop = (workShopName: string) => {
    const trimmedName = workShopName?.trim();
    const translation = homeTranslations.workshops[trimmedName as keyof typeof homeTranslations.workshops];
    return translation ? translation[currentLanguage] : trimmedName;
  };

  /** -------------------- —Å–æ—Å—Ç–æ—è–Ω–∏—è -------------------- */
  const [selectedDate, setSelectedDate]     = useState<Date | null>(new Date());
  const [productionData, setProductionData] = useState<any>({});
  const [loading, setLoading]               = useState(false);
  const [hoveredWorkShop, setHoveredWorkShop] = useState<{workShop: string, workCenter: string} | null>(null);
  const [defaultWorkShop, setDefaultWorkShop] = useState<{workShop: string, workCenter: string} | null>(null);
  const [pinnedWorkShop, setPinnedWorkShop] = useState<{workShop: string, workCenter: string} | null>(null);

  /** -------------------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ table4 totals -------------------- */
  const processTable4Data = useCallback((table4Data: any) => {
    if (!table4Data) return [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ totals –≤ table4
    const hasTotals = table4Data && typeof table4Data === 'object' && 'totals' in table4Data;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º totals —á–∞—Å—Ç—å –¥–ª—è —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (hasTotals && Array.isArray(table4Data.totals)) {
      const processedData = table4Data.totals.map((item: any) => {
        const planQty = parseFloat(item.TOTAL_Plan_QTY) || 0;
        const factQty = parseFloat(item.TOTAL_FACT_QTY) || 0;
        const completed = planQty > 0 ? Math.round((factQty / planQty) * 100) : 0;
        
        return {
          workShop: translateWorkShop(item.WorkShopName_CH || ''),
          workCenter: item.WorkCentor_CN || '',
          planQty: planQty,
          factQty: factQty,
          completed: `${completed}%`
        };
      });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∫ –¥–µ—Ñ–æ–ª—Ç–Ω—É—é, –µ—Å–ª–∏ –æ–Ω–∞ –µ—â–µ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
      if (processedData.length > 0 && !defaultWorkShop) {
        setDefaultWorkShop({
          workShop: processedData[0].workShop,
          workCenter: processedData[0].workCenter
        });
      }
      
      return processedData;
    }
    
    return [];
  }, [defaultWorkShop, translateWorkShop]);

  /** -------------------- –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ table4 details -------------------- */
  const processTable4Details = useCallback((table4Data: any, selectedWorkShop: {workShop: string, workCenter: string} | null = null) => {
    if (!table4Data) return [];
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ details –≤ table4
    const hasDetails = table4Data && typeof table4Data === 'object' && 'details' in table4Data;
    
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º details —á–∞—Å—Ç—å –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    if (hasDetails && Array.isArray(table4Data.details)) {
      let filteredDetails = table4Data.details;
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É WorkShop –∏ WorkCenter
      if (selectedWorkShop) {
        filteredDetails = table4Data.details.filter((item: any) => {
          const itemWorkShopTranslated = translateWorkShop(item.WorkShopName_CH || '');
          return itemWorkShopTranslated === selectedWorkShop.workShop && 
                 item.WorkCentor_CN === selectedWorkShop.workCenter;
        });
      }
      
      return filteredDetails.map((item: any) => {
        const planQty = parseFloat(item.Plan_QTY) || 0;
        const factQty = parseFloat(item.FACT_QTY) || 0;
        const completed = planQty > 0 ? Math.round((factQty / planQty) * 100) : 0;
        
        return {
          orderNo: item.OrderNumber || '',
          articleNumber: item.NomenclatureNumber || '',
          name: item.GroupName || '',
          plan: planQty,
          fact: factQty,
          completed: `${completed}%`
        };
      });
    }
    
    return [];
  }, [translateWorkShop]);

  /** -------------------- API‚Äë–∑–∞–ø—Ä–æ—Å -------------------- */
  const fetchProductionData = useCallback(async (date: Date | null, silent: boolean = false) => {
    if (!date) return;

    console.log(`üì° Fetching Production data (silent: ${silent})`);

    if (!silent) {
      setLoading(true);
    }
    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, '0');
      const day = String(date.getDate()).padStart(2, '0');
      const formatted = `${year}-${month}-${day}`;  // YYYY-MM-DD
      
      const res = await fetch(
        `/api/Home/Production?date=${formatted}`,
      );

      if (!res.ok) throw new Error(res.statusText);
      const data = await res.json();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ totals –≤ –∫–æ—Ä–Ω–µ –æ—Ç–≤–µ—Ç–∞
      const hasTotalsInRoot = data && typeof data === 'object' && 'totals' in data;
      
      setProductionData(data);
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      setHoveredWorkShop(null);
      setDefaultWorkShop(null);
      setPinnedWorkShop(null);
    } catch (err) {
      console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', err);
    } finally {
      if (!silent) {
        setLoading(false);
      }
      console.log('‚úÖ Production data fetched successfully');
    }
  }, []);

  /** -------------------- –ø–æ–¥–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏ —Å–º–µ–Ω–µ –¥–∞—Ç—ã -------------------- */
  useEffect(() => {
    console.log('üìÖ Date changed (Production), fetching data...', { selectedDate });
    fetchProductionData(selectedDate);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedDate]); // –£–±—Ä–∞–ª–∏ fetchProductionData –∏–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

  /** -------------------- –≤–µ—Ä—Å—Ç–∫–∞ -------------------- */
  
  // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
  const workShopRows = processTable4Data(productionData.table4);
  
  return (
    <ProductionProvider value={{
      fetchProductionData,
      setHoveredWorkShop,
      workShopRows,
      selectedDate,
      productionData,
      pinnedWorkShop,
      setPinnedWorkShop
    }}>
      <AutoDashboard>
        <div className="container">
             {/* KPI‚Äë–∫–∞—Ä—Ç–æ—á–∫–∏ + –¥–∞—Ç—É –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É */}
       <section className="flex flex-wrap items-end gap-6 mb-6 mt-4">
        {/* –ö–∞—Ä—Ç–æ—á–∫–∏: —Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ —Å –ø–æ–º–æ—â—å—é flex-1 */}
        <div className="grid flex-1 gap-6 [grid-template-columns:repeat(auto-fit,minmax(12.5rem,max-content))]">
          {kpiData.map((kpi) => {
            // –î–ª—è "Month. Plan" –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ table2
            if (kpi.label === "Month. Plan" && productionData.table2) {
              const { FactQty_MTD, PlanQty_Month, FactQty_Day } = productionData.table2;
              const percentage = PlanQty_Month > 0 ? Math.round((FactQty_MTD / PlanQty_Month) * 100) : 0;
              const dayPercentage = PlanQty_Month > 0 ? Math.round((FactQty_Day / PlanQty_Month) * 100) : 0;
              return (
                <MetricCard
                  key={kpi.label}
                  label={kpi.label}
                  value={`${percentage}%`}
                  changePercent={dayPercentage}
                  isPositiveMetric={true}
                />
              );
            }
            // –î–ª—è "Time Loss" –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ table3
            if (kpi.label === "Time Loss" && productionData.table3) {
              const { TimeLoss_Month, FactTime_MTD, TimeLoss_PrevMonth, FactTime_PrevMonth } = productionData.table3;
              // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ –≤ —á–∏—Å–ª–∞
              const timeLoss = parseFloat(TimeLoss_Month) || 0;
              const factTime = parseFloat(FactTime_MTD) || 0;
              const timeLossPrev = parseFloat(TimeLoss_PrevMonth) || 0;
              const factTimePrev = parseFloat(FactTime_PrevMonth) || 0;
              
              // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ—Ç–µ—Ä—å –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
              const totalTime = timeLoss + factTime;
              const timeLossPercentage = totalTime > 0 ? Math.round((1 - factTime / totalTime) * 100) : 0;
              
              // –†–∞—Å—á–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –ø–æ—Ç–µ—Ä—å –¥–ª—è –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
              const totalTimePrev = timeLossPrev + factTimePrev;
              const timeLossPercentagePrev = totalTimePrev > 0 ? Math.round((1 - factTimePrev / totalTimePrev) * 100) : 0;
              
              // –†–∞–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É —Ç–µ–∫—É—â–∏–º –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–º –º–µ—Å—è—Ü–µ–º
              const changePercent = timeLossPercentage - timeLossPercentagePrev;
              
              return (
                <MetricCard
                  key={kpi.label}
                  label={kpi.label}
                  value={`${timeLossPercentage}%`}
                  changePercent={changePercent}
                  isPositiveMetric={false}
                />
              );
            }
            // –î–ª—è "Rework" –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ rework_tasks_count
            if (kpi.label === "Rework" && productionData.rework_tasks_count !== undefined) {
              const reworkCount = productionData.rework_tasks_count || 0;
              return (
                <MetricCard
                  key={kpi.label}
                  label={kpi.label}
                  value={`${reworkCount}`}
                  changePercent={0}
                  isPositiveMetric={false}
                />
              );
            }
            // –î–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ
            return (
              <MetricCard
                key={kpi.label}
                label={kpi.label}
                value={kpi.value}
                changePercent={kpi.delta}
                isPositiveMetric={kpi.label !== 'Bounce rate'}
              />
            );
          })}
        </div>

                 {/* –ë–ª–æ–∫ —Å –ø–∏–∫–µ—Ä–æ–º ‚Äï –ø—Ä–∏–∂–∞—Ç –∫ –ø—Ä–∞–≤–æ–º—É –∫—Ä–∞—é –±–ª–∞–≥–æ–¥–∞—Ä—è ml-auto */}
         <div className="mr-auto">
           <DateRangePickerPro
             mode="single"
             startDate={selectedDate}
             onApply={(date) => setSelectedDate(date)}
             placeholder=""
             locale="en"
             position="right"
           />
         </div>
      </section>

      {/* –ì—Ä–∞—Ñ–∏–∫ –ø–ª–∞–Ω/—Ñ–∞–∫—Ç */}
      <div className="mb-4">
        <TrendChart productionData={productionData.table1 || []} />
      </div>

      {/* ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å–Ω–∞—è –ª–∏–Ω–∏—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ */}
      <hr className="border-t border-gray-200 -mx-6 mb-2" />

      {/* –î–≤–µ –º–∏–Ω–∏‚Äë—Ç–∞–±–ª–∏—Ü—ã –ø–æ–¥ –≥—Ä–∞—Ñ–∏–∫–æ–º */}
      <section className="flex flex-col lg:flex-row gap-4 pt-2 relative">
        <MiniTable
          title="WorkShop"
          secondTitle="Plan/Fact"
          secondTitlePosition="mr-24"
          cols={['WorkShop', 'WorkCenter', 'Plan', 'Fact', 'Compl.']}
          rows={processTable4Data(productionData.table4).map((item: any) => [
            item.workShop,
            item.workCenter,
            item.planQty.toLocaleString(),
            item.factQty.toLocaleString(),
            item.completed,
          ])}
          onRowHover={(workShop, workCenter) => {
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞, –Ω–µ —Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ hover
            if (!pinnedWorkShop) {
              setHoveredWorkShop({ workShop, workCenter });
            }
          }}
          onRowLeave={() => {
            // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø—Ä–∏ —É—Ö–æ–¥–µ –∫—É—Ä—Å–æ—Ä–∞
            if (!pinnedWorkShop) {
              setHoveredWorkShop(null);
            }
          }}
          onRowClick={(workShop, workCenter) => {
            // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
            if (pinnedWorkShop?.workShop === workShop && pinnedWorkShop?.workCenter === workCenter) {
              // –ï—Å–ª–∏ –∫–ª–∏–∫–Ω—É–ª–∏ –Ω–∞ —É–∂–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É - –æ—Ç–∫—Ä–µ–ø–ª—è–µ–º
              setPinnedWorkShop(null);
              setHoveredWorkShop(null);
            } else {
              // –ó–∞–∫—Ä–µ–ø–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
              setPinnedWorkShop({ workShop, workCenter });
              setHoveredWorkShop({ workShop, workCenter });
            }
          }}
          pinnedWorkShop={pinnedWorkShop}
        />

        {/* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ª–∏–Ω–∏—è‚Äë—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å */}
        <div className="absolute top-0 bottom-0 left-1/2 w-px bg-gray-200 -translate-x-1/2" />

        <MiniTable
          title="Details"
          secondTitle="Plan/Fact"
          secondTitlePosition="mr-16"
          cols={['Order No', 'Article Number', 'Name', 'Plan', 'Fact', 'Compl.']}
          rows={processTable4Details(productionData.table4, hoveredWorkShop || defaultWorkShop).map((item: any) => [
            item.orderNo,
            item.articleNumber,
            item.name,
            item.plan,
            item.fact,
            item.completed,
          ])}
        />
      </section>


        </div>
      </AutoDashboard>
    </ProductionProvider>
  );
}
