import React, { useState, useEffect, useRef } from 'react';
import { useProductionContext } from '../ProductionContext';

interface AutoDashboardProps {
  children: React.ReactNode;
  refreshInterval?: number;    // 60 —Å–µ–∫
  rowSwitchInterval?: number;  // 10 —Å–µ–∫  
  mouseIdleTime?: number;     // 60 —Å–µ–∫
}

// –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞–≤—Ç–æ—Ä–µ–∂–∏–º–∞
const AutoDashboardContext = React.createContext<{
  isAutoMode: boolean;
  currentRowIndex: number;
}>({
  isAutoMode: false,
  currentRowIndex: 0
});

export const useAutoDashboard = () => React.useContext(AutoDashboardContext);

export const AutoDashboard = ({ 
  children, 
  refreshInterval = 60000, 
  rowSwitchInterval = 10000, 
  mouseIdleTime = 60000 
}: AutoDashboardProps) => {
  const { 
    fetchProductionData, 
    setHoveredWorkShop, 
    workShopRows, 
    selectedDate,
    pinnedWorkShop,
    setPinnedWorkShop
  } = useProductionContext();

  const [isAutoMode, setIsAutoMode] = useState(false);
  const [currentRowIndex, setCurrentRowIndex] = useState(0);
  const [lastMouseMove, setLastMouseMove] = useState(Date.now());
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ref –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
  const isAutoModeRef = useRef(isAutoMode);
  const pinnedWorkShopRef = useRef(pinnedWorkShop);
  const lastMouseMoveRef = useRef(lastMouseMove);
  
  // –û–±–Ω–æ–≤–ª—è–µ–º refs –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
  useEffect(() => {
    isAutoModeRef.current = isAutoMode;
  }, [isAutoMode]);
  
  useEffect(() => {
    pinnedWorkShopRef.current = pinnedWorkShop;
  }, [pinnedWorkShop]);
  
  useEffect(() => {
    lastMouseMoveRef.current = lastMouseMove;
  }, [lastMouseMove]);

  // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    console.log('üöÄ AutoDashboard mounted (Production)', {
      refreshInterval: `${refreshInterval}ms (${refreshInterval/1000}s)`,
      rowSwitchInterval: `${rowSwitchInterval}ms (${rowSwitchInterval/1000}s)`,
      mouseIdleTime: `${mouseIdleTime}ms (${mouseIdleTime/1000}s)`
    });
  }, [refreshInterval, rowSwitchInterval, mouseIdleTime]);

  // –ö–æ–≥–¥–∞ –≤–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–µ–∂–∏–º - —Å–Ω–∏–º–∞–µ–º –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
  useEffect(() => {
    if (isAutoMode && pinnedWorkShop) {
      console.log('üîì Auto mode activated - unpinning row');
      setPinnedWorkShop(null);
    }
  }, [isAutoMode, pinnedWorkShop, setPinnedWorkShop]);

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è –º—ã—à–∏
  useEffect(() => {
    const handleMouseMove = () => {
      setLastMouseMove(Date.now());
      if (isAutoMode) {
        console.log('üñ±Ô∏è Mouse moved - stopping auto mode');
        setIsAutoMode(false);
      }
    };
    
    document.addEventListener('mousemove', handleMouseMove);
    return () => document.removeEventListener('mousemove', handleMouseMove);
  }, [isAutoMode]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º—ã—à–∏
  useEffect(() => {
    console.log('üîç Setting up idle time checker (Production)');
    
    const checkIdleTime = () => {
      const idleTime = Date.now() - lastMouseMoveRef.current;
      const idleSeconds = Math.floor(idleTime / 1000);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
      if (idleSeconds % 10 === 0 && idleSeconds > 0 && idleSeconds <= mouseIdleTime / 1000) {
        console.log(`‚è±Ô∏è Idle for ${idleSeconds}s / ${mouseIdleTime/1000}s (autoMode: ${isAutoModeRef.current}, pinned: ${!!pinnedWorkShopRef.current})`);
      }
      
      // –í–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ—Ä–µ–∂–∏–º –ø—Ä–∏ –ø—Ä–æ—Å—Ç–æ–µ (–¥–∞–∂–µ –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ - –æ–Ω –µ—ë –æ—Ç–∫—Ä–µ–ø–∏—Ç)
      if (idleTime >= mouseIdleTime && !isAutoModeRef.current) {
        console.log('‚è∞ Mouse idle for 1 minute - starting auto mode');
        setIsAutoMode(true);
      }
    };
    
    const interval = setInterval(checkIdleTime, 1000);
    return () => {
      console.log('üõë Clearing idle time checker (Production)');
      clearInterval(interval);
    };
  }, [mouseIdleTime]); // –¢–æ–ª—å–∫–æ mouseIdleTime –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö

  // –ê–≤—Ç–æ–ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫
  useEffect(() => {
    if (!isAutoMode || workShopRows.length === 0) return;
    
    const interval = setInterval(() => {
      console.log('üîÑ Auto-switching to next row');
      const nextIndex = (currentRowIndex + 1) % workShopRows.length;
      setCurrentRowIndex(nextIndex);
      
      const nextRow = workShopRows[nextIndex];
      if (nextRow) {
        setHoveredWorkShop({
          workShop: nextRow.workShop,
          workCenter: nextRow.workCenter
        });
      }
    }, rowSwitchInterval);
    
    return () => clearInterval(interval);
  }, [isAutoMode, rowSwitchInterval, workShopRows, currentRowIndex, setHoveredWorkShop]);

  // –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (!isAutoMode) return;
    
    console.log(`‚úÖ Auto mode ACTIVE - setting up refresh interval (Production) (${refreshInterval}ms = ${refreshInterval/1000}s)`);
    
    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –∞–≤—Ç–æ-—Ä–µ–∂–∏–º–∞
    if (selectedDate) {
      console.log('üìû Initial auto-refresh on activation (Production)');
      fetchProductionData(selectedDate, true);
    }
    
    const interval = setInterval(() => {
      console.log('üîÑ Auto-refreshing data (Production)', { selectedDate });
      if (selectedDate) {
        console.log('üìû Calling fetchProductionData (silent mode)');
        fetchProductionData(selectedDate, true); // silent = true –¥–ª—è —Ç–∏—Ö–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
      } else {
        console.warn('‚ö†Ô∏è selectedDate is null, skipping refresh');
      }
    }, refreshInterval);
    
    return () => {
      console.log('üõë Clearing auto-refresh interval (Production)');
      clearInterval(interval);
    };
  }, [isAutoMode, refreshInterval, selectedDate, fetchProductionData]);

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤ localStorage
  useEffect(() => {
    localStorage.setItem('autoDashboard', JSON.stringify({
      isAutoMode,
      currentRowIndex,
      lastMouseMove
    }));
  }, [isAutoMode, currentRowIndex, lastMouseMove]);

  // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  useEffect(() => {
    const saved = localStorage.getItem('autoDashboard');
    if (saved) {
      try {
        const settings = JSON.parse(saved);
        setCurrentRowIndex(settings.currentRowIndex || 0);
        setLastMouseMove(settings.lastMouseMove || Date.now());
      } catch (error) {
        console.error('Error loading auto dashboard settings:', error);
      }
    }
  }, []);

  return (
    <AutoDashboardContext.Provider value={{ isAutoMode, currentRowIndex }}>
      {children}
    </AutoDashboardContext.Provider>
  );
}; 