import { ReactElement, useContext, useEffect } from "react";
import {
  motion,
  useTransform,
  useMotionValue,
  animate,
  AnimatePresence,
} from "framer-motion";
import { SidebarWidthCtx } from "./Sidebar";

type SidebarIconProps = {
  icon: ReactElement;
  label: string;
  isActive?: boolean;
  shiftIcons: boolean;
  showLabel: boolean;
  onShiftEnd: () => void;
  staticCenter?: boolean;
  isCollapsed: boolean;
};

/* --- –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ --- */
const ICON_HALF = 12;   // 24 / 2
const LEFT_PAD = 8;     // ¬´–æ–¥–∏–Ω –ø—Ä–æ–±–µ–ª¬ª ‚âà 8 px –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è

export function SidebarIcon({
  icon,
  label,
  isActive = false,
  shiftIcons,
  showLabel,
  onShiftEnd,
  staticCenter = false,
  isCollapsed,
}: SidebarIconProps) {
  /* —à–∏—Ä–∏–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞ ‚Üí —Ü–µ–Ω—Ç—Ä –∏–∫–æ–Ω–∫–∏ */
  const widthMV = useContext(SidebarWidthCtx)!;
  const centerX = useTransform(widthMV, (w) => w / 2 - ICON_HALF);

  /* –µ–¥–∏–Ω—ã–π MotionValue, –∫–æ—Ç–æ—Ä—ã–π –∂–∏–≤—ë—Ç –≤ style */
  const xMV = useMotionValue(centerX.get());

  /* --- —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∏–º–∞—Ü–∏—è --- */
  if (!staticCenter) {
    useEffect(() => {
      if (!shiftIcons) {
        /* —Ñ–∞–∑–∞-1: –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∏–º xMV = —Ü–µ–Ω—Ç—Ä */
        const unsub = centerX.on("change", (latest) => xMV.set(latest));
        return unsub; // –æ—Ç–ø–∏—Å–∫–∞
      }

      /* —Ñ–∞–∑–∞-2: –ø–ª–∞–≤–Ω–æ –µ–¥–µ–º –≤–ª–µ–≤–æ */
      const controls = animate(xMV, LEFT_PAD, {
        duration: 0.6,
        ease: [0.42, 0, 0.58, 1],
        onComplete: onShiftEnd,
      });
      return controls.stop;
    }, [shiftIcons, centerX, xMV, onShiftEnd]);
  }

  return (
    <motion.div
      layout
      whileHover={!staticCenter ? { backgroundColor: "rgba(255,255,255,0.10)" } : undefined}
      transition={{ duration: 0.18 }}
      className="group w-full flex items-center rounded-xl cursor-pointer py-3 relative mx-0"
    >
      {/* –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∫–∞ ¬´–∞–∫—Ç–∏–≤–µ–Ω¬ª */}
      {isActive && (
        <motion.div
          layoutId="sidebarActive"
          className="absolute left-0 top-1/2 -translate-y-1/2 w-1 h-6 bg-white rounded-r"
        />
      )}

      {/* —Å–∞–º–∞ –∏–∫–æ–Ω–∫–∞ */}
      <motion.div
        /* staticCenter üëâ –≤—Å–µ–≥–¥–∞ –¥–µ—Ä–∂–∏–º —Ü–µ–Ω—Ç—Ä, –Ω–æ –±–µ–∑ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤–ª–µ–≤–æ */
        style={staticCenter
          ? { x: centerX, height: 24 }
          : { x: xMV, height: 24 }}
        className="w-6 flex-shrink-0 flex items-center justify-start"
        whileHover={!staticCenter ? { scale: 1.1 } : undefined}
        transition={{ type: "spring", stiffness: 300, damping: 20 }}
      >
        {icon}
      </motion.div>

      {/* tooltip ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¢–û–õ–¨–ö–û –∫–æ–≥–¥–∞ —Å–∞–π–¥–±–∞—Ä —É–∑–∫–∏–π */}
      {!staticCenter && isCollapsed && (
        <span
          className="absolute left-full ml-3 py-1 px-2 rounded bg-white text-[#0d1c3d] text-xs font-medium shadow-lg whitespace-nowrap opacity-0 scale-95 pointer-events-none group-hover:opacity-100 group-hover:scale-100 transition-all duration-150"
        >
          {label}
        </span>
      )}

      {/* –ø–æ–¥–ø–∏—Å—å –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Å–¥–≤–∏–≥–∞ –∏–∫–æ–Ω–æ–∫ */}
      <AnimatePresence>
        {showLabel && (
          <motion.span
            key="label"
            initial={{ opacity: 0, x: -4 }}
            animate={{ opacity: 1, x: 0 }}
            exit={{ opacity: 0, x: -4 }}
            transition={{ duration: 0.25 }}
            className="ml-3 text-white text-sm font-medium"
          >
            {label}
          </motion.span>
        )}
      </AnimatePresence>
    </motion.div>
  );
}
